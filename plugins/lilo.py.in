import re
import sjconf

class Plugin(sjconf.Plugin):

    VERSION = '@PACKAGE_VERSION@'

    class InvalidSetting(sjconf.Plugin.Error):
        def __init__(self, message):
            self.msg = 'lilo: ' + message

    def conf_files_path(self):
        return (self.sjconf.etc_dir + '/lilo.conf',)

    def conf_types(self):
        return (
            ('lilo', 'options', 'list'),
            (re.compile('^lilo:'), 'options', 'list'),
        )

    def file_content(self, file_path):
        res_content = []

        # Global options handling
        for key, value in self.conf['lilo'].iteritems():
            # XXX: images key is obsolete and needs to be removed when packages
            # using it have been updated.
            if key in ('options', 'images'):
                continue
            res_content.append('%s = %s' % (key, value))

        if 'default' not in self.conf['lilo']
            return '\n'.join(res_content)

        # Validate default kernel
        if 'lilo:' + self.conf['lilo']['default'] not in self.conf:
            raise Plugin.InvalidSetting('Default kernel value is invalid')

        # Append boolean options
        res_content += self.conf['lilo']['options_list']
        res_content.append('')

        # Handle kernel images
        for image in self.conf.keys():
            if not image.startswith('lilo:'):
                continue

            res_content.append('image = %s' % self.conf[image]['image'])
            for key, value in self.conf[image].iteritems():
                if key in ('options', 'image'):
                    continue
                res_content.append('\t%s = %s' % (key, value))

            # Append boolean options
            res_content += ['\t' + option for option in self.conf[image]['options_list']]

        return '\n'.join(res_content)

